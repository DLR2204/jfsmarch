on -1 ,off - 0 ---------------------------->  Ascii/Unicode
							a-97-010101010
							
	s.l:- designing of websites
	
	p.l :-developing softwares
							
								computer lang 
								
				scripting lang				programming lang
		html,css,...........			pop					oop
								
									basic,....			java,.net,....
									
Secuirty:- Abstraction,Encapsulation

Performance:- Polymorphism,Inheritance								
									
									
									
									
java :-   oops ------>  oopl

(1)portable 

(2)Garbage Collector

SUNMICROSYS'S:-                              oracle
-------------

GreenTalk(.gt)--------------->oak------------>java(.java)

jdk 1.0 ------------------------------------->jdk 24


jse/j2se:-standalone app's(core java)

jee/j2ee:-Web app's/distributed app's(Adv java)

jme/j2me:- Mobile app's(Micro java)

	java cmd:- java --version				
	
	
	53 reserved words
	
	ide shortcuts :- 
	--------------
	
	main :- ctrl + space 
	
	syso :- ctrl + space
	
	
	varaibles :- 
	
	
	syntax:-     datatype varname ;   //declaration
	
				datatype varname = value ;   //intiliazation
	
				
				
				2 types :- 
				
		local varaibles(inside the method)		global variables(outside the method)
		
												static g.v  		instance g.v
												
	
syntax :- 
=======

static :-   static datatype varname = value ; 

instance:-   datatype varname = value ; 
									
access :- 
-------									
									
static :- static prop's can be accessed by the class reference.

instance:- instance prop's can be accessed with the object reference.

				syntax :- 
				
				
		classname objectname = new classname();
		
Memory space:- 
-------------
		
static :- It will  gets memory space only once when the class loads into jvm

instance:- It will gets the memory space for every object creation

Usage:- 
-------

static :- Common data

instance:- 	Unique data								

In the memory:- 
=============

static :- method area

instance :- heap area



Operators :- 		ULTRA AB
===========

				a  +  b
Uniary Operator

Logical Operator

Terinary Operator

Relational Operator

Assignment Operator

Arithematic Operator

Bitwise Operator


Methods :- Set of statements where they will executes altogether to perform one task.
=======
				
		SYNTAX :- 
					
					AccessModifier returnType methodName(params....){
					
					//body
					}



					(1)static methods
					
			syntax:-
			========

						AccessModifier static returnType methodName(params....){
					
							//body
							}
			
					(2)Dynamic methods
					
			syntax:-
			========

						AccessModifier returnType methodName(params....){
					
							//body
							}		
					
					
		*class = variables(class members) + methods(member functions) 
		
		
		*n objects
		
		syntax:- 
		
		className objectName ;  //declaration of object
		
		className objectName = new ClassName();  //intiliazation of the object
		
		
		
		Inheritance :- Accuqring parent class prop's to the child class
		------------
							*Code Reusability
		
		
					extends 					implements
				class-->class					interface--->class
				interface-->interface	
		

			class A {   //parent/super
			
			100 methods
			}
			class B extends A{  //child/sub/base
			
			  ------------->100 methods
			
			}	
		
		
		class A{			Class B{		
		
		add(a,b)			add(a,b)
		
		}					}


		class C extends A,B{
		
		add(,);  
		
		}


		*Multiple inheritace is not supported in java @Class level
		
		*Multiple Inheritance is supported in java @ interface level
		
		methods :- 2 types 
		
		
		(1)concrete methods :-  method with method body
		
		syntax:-
		========

						AccessModifier returnType methodName(params....){
					
							//body
							}	
		
		(2)abstract methods :- method without method body
		
		syntax:-
			========

						AccessModifier returnType methodName(params....);
						
						
		class = it's the only collection of concrete methods in it.
		
		abstract class = collection of concrete methods + collection of abstract methods
		
		interface = it's the only collection of abstract method in it.
		
		
		Abstraction :- Hiding the data
		------------
							*Secuirty
		
		interface       100%
		
		abstract class  0%-100%
		
		class			0%
		
		
		Polymorphism :- 		*Code resuability 		
		------------
		
		(1)methodOverloading :- same method names but with diff parameters
								(a)type of parameters
								(b)order of parameters
								(c)number of parameters
		
		(2)MethodOverriding:- same method name but with diff implementation/body
		
		class Parent{
		
		10,000Cr()
		
		marriage()
		
		relatives()
		
		}
		
		
		class Child extends Parent{
		
		@Override
		marriage(){
		//deepika
		}
		
		}
		
		Encapsulation:- It will wraps the data  into single unit
		==============
		
	Parent Class For every java file      :- java.lang.Object
	
	Default package for every java file   :- java.lang
	
	
	Constructor :- To initialize the objects.
	-----------  
	
	(1)default Constructor
	
	syntax:- 			accessModifier className(){
							
							//body
	
							}
	
	
	(2)Parametrized constructor
	
		syntax:- 			accessModifier className(params...){
							
							//body
	
							}
							
*Constructor call must be the first statement in a constructor.


Arrays:- It is a collection of homogenous elements
=======


		syntax:- 
		
		method1 :- int arr[] = new int[10];
		
		method2 :- int[] arr = new int[]{1,2,3,4,5,56,6,7,7,7,87};
		
		method3 :- int []arr = {1,1,3,3,4,5,65,6,6,6,3};
		
Limitations:-		
		
		(1)can stores Only similar datatypes 
		
		(2)fixed in size
		
		(3)No utility methods
		
		
		
	collections :- framework   [java.util]
	===========
	
	adv:-
	
		(1)It can stores both similar,disimilar objects
		
		(2)Not fixed in size
		
		(3)Lots of utility methods
		
		
		
		FileHandling:-  java.io
		
		
		(1)create a file 			:- File
		
		
		(2)write into the file		:- FileWriter
									   BufferedWriter
									   PrintWriter
		
		
		(3)Read from the file		:- FileReader
									   BufferedReader
										
										
										
		interface :- 
		
		0 - marker interface
		
		1 - functional interface(sam)
		
		
		String:- 
		======
		
		String name = value;   //string literal
		
		
		String 						StringBuffer 				StringBuilder
		
		immutable					mutable						mutable
		
									sync						not-sync
									
		Mutli-Threading:- Running more than one threads at a time.
		
		
		junit :- java unit testing
		
		
		
		
		Data:-Raw info any real world entites
		====
		
		Database:- To store the data in an organized way for future access by providing security
		
		RDBMS:- tables (rows[records] + columns[fields])  ---Sql,MySql
		
		
		Query :- A command in db to perform any opertion
		
		
		DDL(Data Definition Lang):- create ,alter,drop ,truncate,rename [auto-comitted]
		
		DML(Data Manipulation Lang):- insert,update,delete [not auto-comitted]
		
		DRL(Data Retrival lang):- select 
		
		DCL (Data control lang):- grant,revoke
		
		TCL(Trans'n Control Lang):- commit,rollback
	
		
		drop  :- it will deletes the entire table 
		
		truncate :- it will deletes the records inside the table.
		
		delete :- it will deletes the required records.
		
									jdbc
									====
									
	
	(1)Loading driver classes
	
	(2)Creating the connection
	
	(3)create the statement
	
	(4)excute the statement
	
	(5)close the connections
		
		
		
		Limitations:- 
		-----------

	(1)Queries
	
	(2)Table creation 
	
	(3)same files for db prop's, logic
	
	(4)Boiler plate code(repeated code)
		
		

	jpa(Java Persistence API):- SPECIFICATIONS
	--------------------------
		

		
		
	ORM(Object Relational Mapping) Tools:- hibernate,ecllipse ,toplink ,ibatis.......
	
	
	(1)No Queries  ----  methods    
	
	(2)No Table creation  ---- java class
	
	class---------->table
	
	variables ---------->columns
	
	objects ------------>rows
	
	(3)diff files for db prop's, logic    ---- db:- persistence.xml
	
	persistence.xml:- 
	
				tag:- 	<predefined word>
				
				(1)container/pair :- <predefined word></predefined word>
				
				(2)single/empty :- <predefined word> or </predefinedword>
					
	
	(4)No Boiler plate code(repeated code)
		
	
	Persistence
		|
		
	EntityManagerFactory
		|
	EntityManager
	
	
	
	Maven :- It's a build tool.
	
								Spring:-
								=======
								
	def:- Spring is a non-invasive framework which is used to develop light-weighted and
				loosely coupled web applications.
				
				
		invasive :- it will rushes the programmer to use the predefined api
		
		non-invasive :- it will not rushes the programmer to use the predefined api
		
		
		heavy-weighted  
		
		ligth-weighted 
		
		class A{
		10000 METHODS
		}
		
		class B extends A{
		1 method
		
		}
		
		class C extends B{
		
		1 METHOD
		
		}
		
		Tightly coupled :- If the dependencies b/n the classes are very high
		
		Loosely coupled :- If the dependencies  b/n the classes are low
		
		
		Spring Core ;Spring Boot ;Spring Rest;Spring Secuirty;Spring Cloud....................
		
		
								Spring Core :- 
								-----------
		To avoid the dependencies b/n the classes by avoiding object creation .
		
		
		Containers:- To create the objects.
		
					(1)BeanFactory
					
					(2)Application Context
					
		Dependency Injection :- To inject the data into the object
		
					(1)Setter Injection
					
					(2)Constructor Injection
					
		
		Configuration :- (1)Xml Configuration
		
						(2)Annotation Configuration
		
		